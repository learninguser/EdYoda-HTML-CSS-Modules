============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py FFFFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
___________________________________________________________ test_eval1[5-expected0] ____________________________________________________________

test_input = 5, expected = ['78.50', '31.40']

    @pytest.mark.parametrize("test_input, expected", [(5, ['78.50', '31.40'])])
    def test_eval1(test_input, expected):
        c1 = Circle(test_input)
>       assert c1.Display() == expected

test_students.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <a01.Circle object at 0x7fc7cee641d0>

    def Display(self):
>       return [self.area, self.circumference]
E       AttributeError: 'Circle' object has no attribute 'area'

a01.py:17: AttributeError
________________________________________________________ test_eval2[abc-123-expected0] _________________________________________________________

test_input1 = 'abc', test_input2 = 123, expected = ('abc', 123)

    @pytest.mark.parametrize("test_input1, test_input2, expected", [('abc', 123, ('abc', 123))])
    def test_eval2(test_input1, test_input2, expected):
        s1 = Student(test_input1, test_input2)
>       assert s1.display() == expected
E       AssertionError: assert None == ('abc', 123)
E        +  where None = <bound method Student.display of <a01.Student object at 0x7fc7ceedf810>>()
E        +    where <bound method Student.display of <a01.Student object at 0x7fc7ceedf810>> = <a01.Student object at 0x7fc7ceedf810>.display

test_students.py:12: AssertionError
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert (None == '77.00' or None == '77.00')
E        +  where None = <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7fc7ceed2710>>(25)
E        +    where <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7fc7ceed2710>> = <a01.Temperature object at 0x7fc7ceed2710>.convertFahrenhiet
E        +  and   None = <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7fc7ceed2710>>(25)
E        +    where <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7fc7ceed2710>> = <a01.Temperature object at 0x7fc7ceed2710>.convertCelsius

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7fc7cee64050>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7fc7cee64050>> = <a01.Subset object at 0x7fc7cee64050>.sub_sets
E        +      where <a01.Subset object at 0x7fc7cee64050> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7fc7cee6ac90>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7fc7cee6ac90>> = <a01.Sum object at 0x7fc7cee6ac90>.twoSum
E        +      where <a01.Sum object at 0x7fc7cee6ac90> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fc7cee6d410>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fc7cee6d410>> = <a01.SumEqualsZero object at 0x7fc7cee6d410>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7fc7cee6d410> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fc7cee70350>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fc7cee70350>> = <a01.RomanToInt object at 0x7fc7cee70350>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7fc7cee70350> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fc7ceed2150>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fc7ceed2150>> = <a01.BankAccount object at 0x7fc7ceed2150>.deposit
E        +      where <a01.BankAccount object at 0x7fc7ceed2150> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fc7cef11390>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fc7cef11390>> = <a01.BankAccount object at 0x7fc7cef11390>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fc7ceedda10>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fc7ceedda10>> = <a01.MinimumBalanceAccount object at 0x7fc7ceedda10>.withdraw

test_students.py:50: AssertionError
============================================================== 10 failed in 0.15s ==============================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py FFFFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
___________________________________________________________ test_eval1[5-expected0] ____________________________________________________________

test_input = 5, expected = ['78.50', '31.40']

    @pytest.mark.parametrize("test_input, expected", [(5, ['78.50', '31.40'])])
    def test_eval1(test_input, expected):
        c1 = Circle(test_input)
>       assert c1.Display() == expected

test_students.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <a01.Circle object at 0x7f0d616089d0>

    def Display(self):
>       return [self.area, self.circumference]
E       AttributeError: 'Circle' object has no attribute 'area'

a01.py:15: AttributeError
________________________________________________________ test_eval2[abc-123-expected0] _________________________________________________________

test_input1 = 'abc', test_input2 = 123, expected = ('abc', 123)

    @pytest.mark.parametrize("test_input1, test_input2, expected", [('abc', 123, ('abc', 123))])
    def test_eval2(test_input1, test_input2, expected):
        s1 = Student(test_input1, test_input2)
>       assert s1.display() == expected
E       AssertionError: assert None == ('abc', 123)
E        +  where None = <bound method Student.display of <a01.Student object at 0x7f0d61625250>>()
E        +    where <bound method Student.display of <a01.Student object at 0x7f0d61625250>> = <a01.Student object at 0x7f0d61625250>.display

test_students.py:12: AssertionError
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert (None == '77.00' or None == '77.00')
E        +  where None = <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7f0d615d0a10>>(25)
E        +    where <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7f0d615d0a10>> = <a01.Temperature object at 0x7f0d615d0a10>.convertFahrenhiet
E        +  and   None = <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7f0d615d0a10>>(25)
E        +    where <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7f0d615d0a10>> = <a01.Temperature object at 0x7f0d615d0a10>.convertCelsius

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7f0d616a8210>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7f0d616a8210>> = <a01.Subset object at 0x7f0d616a8210>.sub_sets
E        +      where <a01.Subset object at 0x7f0d616a8210> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7f0d61625e90>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7f0d61625e90>> = <a01.Sum object at 0x7f0d61625e90>.twoSum
E        +      where <a01.Sum object at 0x7f0d61625e90> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f0d615c8e90>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f0d615c8e90>> = <a01.SumEqualsZero object at 0x7f0d615c8e90>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7f0d615c8e90> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f0d615c6110>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f0d615c6110>> = <a01.RomanToInt object at 0x7f0d615c6110>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7f0d615c6110> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f0d6158d710>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f0d6158d710>> = <a01.BankAccount object at 0x7f0d6158d710>.deposit
E        +      where <a01.BankAccount object at 0x7f0d6158d710> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f0d615c8a10>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f0d615c8a10>> = <a01.BankAccount object at 0x7f0d615c8a10>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f0d61593c10>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f0d61593c10>> = <a01.MinimumBalanceAccount object at 0x7f0d61593c10>.withdraw

test_students.py:50: AssertionError
============================================================== 10 failed in 0.08s ==============================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py FFFFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
___________________________________________________________ test_eval1[5-expected0] ____________________________________________________________

test_input = 5, expected = ['78.50', '31.40']

    @pytest.mark.parametrize("test_input, expected", [(5, ['78.50', '31.40'])])
    def test_eval1(test_input, expected):
        c1 = Circle(test_input)
>       assert c1.Display() == expected
E       AssertionError: assert [78.5, 31.4] == ['78.50', '31.40']
E         At index 0 diff: 78.5 != '78.50'
E         Use -v to get the full diff

test_students.py:7: AssertionError
________________________________________________________ test_eval2[abc-123-expected0] _________________________________________________________

test_input1 = 'abc', test_input2 = 123, expected = ('abc', 123)

    @pytest.mark.parametrize("test_input1, test_input2, expected", [('abc', 123, ('abc', 123))])
    def test_eval2(test_input1, test_input2, expected):
        s1 = Student(test_input1, test_input2)
>       assert s1.display() == expected
E       AssertionError: assert None == ('abc', 123)
E        +  where None = <bound method Student.display of <a01.Student object at 0x7fb42f405d90>>()
E        +    where <bound method Student.display of <a01.Student object at 0x7fb42f405d90>> = <a01.Student object at 0x7fb42f405d90>.display

test_students.py:12: AssertionError
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert (None == '77.00' or None == '77.00')
E        +  where None = <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7fb42f3b6d50>>(25)
E        +    where <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7fb42f3b6d50>> = <a01.Temperature object at 0x7fb42f3b6d50>.convertFahrenhiet
E        +  and   None = <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7fb42f3b6d50>>(25)
E        +    where <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7fb42f3b6d50>> = <a01.Temperature object at 0x7fb42f3b6d50>.convertCelsius

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7fb42f4abc50>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7fb42f4abc50>> = <a01.Subset object at 0x7fb42f4abc50>.sub_sets
E        +      where <a01.Subset object at 0x7fb42f4abc50> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7fb42f405750>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7fb42f405750>> = <a01.Sum object at 0x7fb42f405750>.twoSum
E        +      where <a01.Sum object at 0x7fb42f405750> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fb42f3b49d0>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fb42f3b49d0>> = <a01.SumEqualsZero object at 0x7fb42f3b49d0>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7fb42f3b49d0> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fb42f3b6d90>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fb42f3b6d90>> = <a01.RomanToInt object at 0x7fb42f3b6d90>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7fb42f3b6d90> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fb42f3b2550>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fb42f3b2550>> = <a01.BankAccount object at 0x7fb42f3b2550>.deposit
E        +      where <a01.BankAccount object at 0x7fb42f3b2550> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fb42f3b0810>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fb42f3b0810>> = <a01.BankAccount object at 0x7fb42f3b0810>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fb42f3bad10>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fb42f3bad10>> = <a01.MinimumBalanceAccount object at 0x7fb42f3bad10>.withdraw

test_students.py:50: AssertionError
============================================================== 10 failed in 0.08s ==============================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py FFFFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
___________________________________________________________ test_eval1[5-expected0] ____________________________________________________________

test_input = 5, expected = ['78.5', '31.4']

    @pytest.mark.parametrize("test_input, expected", [(5, ['78.5', '31.4'])])
    def test_eval1(test_input, expected):
        c1 = Circle(test_input)
>       assert c1.Display() == expected
E       AssertionError: assert [78.5, 31.4] == ['78.5', '31.4']
E         At index 0 diff: 78.5 != '78.5'
E         Use -v to get the full diff

test_students.py:7: AssertionError
________________________________________________________ test_eval2[abc-123-expected0] _________________________________________________________

test_input1 = 'abc', test_input2 = 123, expected = ('abc', 123)

    @pytest.mark.parametrize("test_input1, test_input2, expected", [('abc', 123, ('abc', 123))])
    def test_eval2(test_input1, test_input2, expected):
        s1 = Student(test_input1, test_input2)
>       assert s1.display() == expected
E       AssertionError: assert None == ('abc', 123)
E        +  where None = <bound method Student.display of <a01.Student object at 0x7fd1ae63ffd0>>()
E        +    where <bound method Student.display of <a01.Student object at 0x7fd1ae63ffd0>> = <a01.Student object at 0x7fd1ae63ffd0>.display

test_students.py:12: AssertionError
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert (None == '77.00' or None == '77.00')
E        +  where None = <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7fd1ae642b50>>(25)
E        +    where <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7fd1ae642b50>> = <a01.Temperature object at 0x7fd1ae642b50>.convertFahrenhiet
E        +  and   None = <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7fd1ae642b50>>(25)
E        +    where <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7fd1ae642b50>> = <a01.Temperature object at 0x7fd1ae642b50>.convertCelsius

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7fd1ae6450d0>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7fd1ae6450d0>> = <a01.Subset object at 0x7fd1ae6450d0>.sub_sets
E        +      where <a01.Subset object at 0x7fd1ae6450d0> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7fd1ae648bd0>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7fd1ae648bd0>> = <a01.Sum object at 0x7fd1ae648bd0>.twoSum
E        +      where <a01.Sum object at 0x7fd1ae648bd0> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fd1ae6e96d0>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fd1ae6e96d0>> = <a01.SumEqualsZero object at 0x7fd1ae6e96d0>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7fd1ae6e96d0> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fd1ae63fad0>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fd1ae63fad0>> = <a01.RomanToInt object at 0x7fd1ae63fad0>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7fd1ae63fad0> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fd1ae6b58d0>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fd1ae6b58d0>> = <a01.BankAccount object at 0x7fd1ae6b58d0>.deposit
E        +      where <a01.BankAccount object at 0x7fd1ae6b58d0> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fd1ae6370d0>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fd1ae6370d0>> = <a01.BankAccount object at 0x7fd1ae6370d0>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fd1ae639f50>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fd1ae639f50>> = <a01.MinimumBalanceAccount object at 0x7fd1ae639f50>.withdraw

test_students.py:50: AssertionError
============================================================== 10 failed in 0.22s ==============================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py .FFFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
________________________________________________________ test_eval2[abc-123-expected0] _________________________________________________________

test_input1 = 'abc', test_input2 = 123, expected = ('abc', 123)

    @pytest.mark.parametrize("test_input1, test_input2, expected", [('abc', 123, ('abc', 123))])
    def test_eval2(test_input1, test_input2, expected):
        s1 = Student(test_input1, test_input2)
>       assert s1.display() == expected
E       AssertionError: assert None == ('abc', 123)
E        +  where None = <bound method Student.display of <a01.Student object at 0x7f4f0926c110>>()
E        +    where <bound method Student.display of <a01.Student object at 0x7f4f0926c110>> = <a01.Student object at 0x7f4f0926c110>.display

test_students.py:12: AssertionError
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert (None == '77.00' or None == '77.00')
E        +  where None = <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7f4f0926ce50>>(25)
E        +    where <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7f4f0926ce50>> = <a01.Temperature object at 0x7f4f0926ce50>.convertFahrenhiet
E        +  and   None = <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7f4f0926ce50>>(25)
E        +    where <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7f4f0926ce50>> = <a01.Temperature object at 0x7f4f0926ce50>.convertCelsius

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7f4f0926fe50>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7f4f0926fe50>> = <a01.Subset object at 0x7f4f0926fe50>.sub_sets
E        +      where <a01.Subset object at 0x7f4f0926fe50> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7f4f09272ed0>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7f4f09272ed0>> = <a01.Sum object at 0x7f4f09272ed0>.twoSum
E        +      where <a01.Sum object at 0x7f4f09272ed0> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f4f09275f10>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f4f09275f10>> = <a01.SumEqualsZero object at 0x7f4f09275f10>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7f4f09275f10> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f4f092780d0>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f4f092780d0>> = <a01.RomanToInt object at 0x7f4f092780d0>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7f4f092780d0> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f4f0931b4d0>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f4f0931b4d0>> = <a01.BankAccount object at 0x7f4f0931b4d0>.deposit
E        +      where <a01.BankAccount object at 0x7f4f0931b4d0> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f4f0926fc50>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f4f0926fc50>> = <a01.BankAccount object at 0x7f4f0926fc50>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f4f0926a590>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f4f0926a590>> = <a01.MinimumBalanceAccount object at 0x7f4f0926a590>.withdraw

test_students.py:50: AssertionError
========================================================= 9 failed, 1 passed in 0.08s ==========================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py ..FFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert (None == '77.00' or None == '77.00')
E        +  where None = <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7f934087c250>>(25)
E        +    where <bound method Temperature.convertFahrenhiet of <a01.Temperature object at 0x7f934087c250>> = <a01.Temperature object at 0x7f934087c250>.convertFahrenhiet
E        +  and   None = <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7f934087c250>>(25)
E        +    where <bound method Temperature.convertCelsius of <a01.Temperature object at 0x7f934087c250>> = <a01.Temperature object at 0x7f934087c250>.convertCelsius

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7f934081d350>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7f934081d350>> = <a01.Subset object at 0x7f934081d350>.sub_sets
E        +      where <a01.Subset object at 0x7f934081d350> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7f934082c790>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7f934082c790>> = <a01.Sum object at 0x7f934082c790>.twoSum
E        +      where <a01.Sum object at 0x7f934082c790> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f934087c410>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f934087c410>> = <a01.SumEqualsZero object at 0x7f934087c410>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7f934087c410> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f934081ded0>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f934081ded0>> = <a01.RomanToInt object at 0x7f934081ded0>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7f934081ded0> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f9340823a10>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f9340823a10>> = <a01.BankAccount object at 0x7f9340823a10>.deposit
E        +      where <a01.BankAccount object at 0x7f9340823a10> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f934082ca50>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f934082ca50>> = <a01.BankAccount object at 0x7f934082ca50>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f934087cd10>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f934087cd10>> = <a01.MinimumBalanceAccount object at 0x7f934087cd10>.withdraw

test_students.py:50: AssertionError
========================================================= 8 failed, 2 passed in 0.07s ==========================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py ..FFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert ('77.0' == '77.00'
E         - 77.0
E         + 77.00
E         ?     + or '-3.888888888888889' == '77.00'
E         - -3.888888888888889
E         + 77.00)

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7fa52daba5d0>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7fa52daba5d0>> = <a01.Subset object at 0x7fa52daba5d0>.sub_sets
E        +      where <a01.Subset object at 0x7fa52daba5d0> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7fa52da6e610>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7fa52da6e610>> = <a01.Sum object at 0x7fa52da6e610>.twoSum
E        +      where <a01.Sum object at 0x7fa52da6e610> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fa52dbe2910>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fa52dbe2910>> = <a01.SumEqualsZero object at 0x7fa52dbe2910>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7fa52dbe2910> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fa52dae5150>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fa52dae5150>> = <a01.RomanToInt object at 0x7fa52dae5150>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7fa52dae5150> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fa52daa5850>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fa52daa5850>> = <a01.BankAccount object at 0x7fa52daa5850>.deposit
E        +      where <a01.BankAccount object at 0x7fa52daa5850> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fa52da6e250>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fa52da6e250>> = <a01.BankAccount object at 0x7fa52da6e250>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fa52daa7d10>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fa52daa7d10>> = <a01.MinimumBalanceAccount object at 0x7fa52daa7d10>.withdraw

test_students.py:50: AssertionError
========================================================= 8 failed, 2 passed in 0.07s ==========================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py ..FFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert ('77.0' == '77.00'
E         - 77.0
E         + 77.00
E         ?     + or '-3.888888888888889' == '77.00'
E         - -3.888888888888889
E         + 77.00)

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7fd4da584510>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7fd4da584510>> = <a01.Subset object at 0x7fd4da584510>.sub_sets
E        +      where <a01.Subset object at 0x7fd4da584510> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7fd4da5ac1d0>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7fd4da5ac1d0>> = <a01.Sum object at 0x7fd4da5ac1d0>.twoSum
E        +      where <a01.Sum object at 0x7fd4da5ac1d0> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fd4da5dc4d0>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7fd4da5dc4d0>> = <a01.SumEqualsZero object at 0x7fd4da5dc4d0>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7fd4da5dc4d0> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fd4da5a5b10>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7fd4da5a5b10>> = <a01.RomanToInt object at 0x7fd4da5a5b10>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7fd4da5a5b10> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fd4da5ac750>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7fd4da5ac750>> = <a01.BankAccount object at 0x7fd4da5ac750>.deposit
E        +      where <a01.BankAccount object at 0x7fd4da5ac750> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fd4da530b50>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7fd4da530b50>> = <a01.BankAccount object at 0x7fd4da530b50>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fd4da5847d0>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7fd4da5847d0>> = <a01.MinimumBalanceAccount object at 0x7fd4da5847d0>.withdraw

test_students.py:50: AssertionError
========================================================= 8 failed, 2 passed in 0.07s ==========================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py ..FFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert ('77.0' == '77.00'
E         - 77.0
E         + 77.00
E         ?     + or '-3.8888888888888890' == '77.00'
E         - -3.8888888888888890
E         + 77.00)

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7f254b1ac410>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7f254b1ac410>> = <a01.Subset object at 0x7f254b1ac410>.sub_sets
E        +      where <a01.Subset object at 0x7f254b1ac410> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7f254b2060d0>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7f254b2060d0>> = <a01.Sum object at 0x7f254b2060d0>.twoSum
E        +      where <a01.Sum object at 0x7f254b2060d0> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f254b1acc50>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f254b1acc50>> = <a01.SumEqualsZero object at 0x7f254b1acc50>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7f254b1acc50> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f254b1d1f50>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f254b1d1f50>> = <a01.RomanToInt object at 0x7f254b1d1f50>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7f254b1d1f50> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f254b158fd0>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f254b158fd0>> = <a01.BankAccount object at 0x7f254b158fd0>.deposit
E        +      where <a01.BankAccount object at 0x7f254b158fd0> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f254b1cf350>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f254b1cf350>> = <a01.BankAccount object at 0x7f254b1cf350>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f254b1acf50>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f254b1acf50>> = <a01.MinimumBalanceAccount object at 0x7f254b1acf50>.withdraw

test_students.py:50: AssertionError
========================================================= 8 failed, 2 passed in 0.07s ==========================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py ..FFFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
_____________________________________________________________ test_eval3[25-77.00] _____________________________________________________________

test_input = 25, expected = '77.00'

    @pytest.mark.parametrize("test_input, expected", [(25, '77.00')])
    def test_eval3(test_input, expected):
        t =Temperature()
>       assert t.convertFahrenhiet(test_input) == expected or t.convertCelsius(test_input)==expected
E       AssertionError: assert ('77.0' == '77.00'
E         - 77.0
E         + 77.00
E         ?     + or '-3.8888888888888890' == '77.00'
E         - -3.8888888888888890
E         + 77.00)

test_students.py:17: AssertionError
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7f1c1eb062d0>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7f1c1eb062d0>> = <a01.Subset object at 0x7f1c1eb062d0>.sub_sets
E        +      where <a01.Subset object at 0x7f1c1eb062d0> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7f1c1eb2e5d0>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7f1c1eb2e5d0>> = <a01.Sum object at 0x7f1c1eb2e5d0>.twoSum
E        +      where <a01.Sum object at 0x7f1c1eb2e5d0> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f1c1eb584d0>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f1c1eb584d0>> = <a01.SumEqualsZero object at 0x7f1c1eb584d0>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7f1c1eb584d0> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f1c1eb06950>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f1c1eb06950>> = <a01.RomanToInt object at 0x7f1c1eb06950>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7f1c1eb06950> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f1c1eb2a410>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f1c1eb2a410>> = <a01.BankAccount object at 0x7f1c1eb2a410>.deposit
E        +      where <a01.BankAccount object at 0x7f1c1eb2a410> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f1c1eae7bd0>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f1c1eae7bd0>> = <a01.BankAccount object at 0x7f1c1eae7bd0>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f1c1eb2ea10>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f1c1eb2ea10>> = <a01.MinimumBalanceAccount object at 0x7f1c1eb2ea10>.withdraw

test_students.py:50: AssertionError
========================================================= 8 failed, 2 passed in 0.07s ==========================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py ...FFFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
______________________________________________________ test_eval4[test_input0-expected0] _______________________________________________________

test_input = [0, 1], expected = [[], [1], [0], [0, 1]]

    @pytest.mark.parametrize("test_input, expected", [([0,1],[[], [1], [0], [0, 1]])])
    def test_eval4(test_input, expected):
>       assert Subset().sub_sets(test_input) == expected
E       assert None == [[], [1], [0], [0, 1]]
E        +  where None = <bound method Subset.sub_sets of <a01.Subset object at 0x7f1ce96f33d0>>([0, 1])
E        +    where <bound method Subset.sub_sets of <a01.Subset object at 0x7f1ce96f33d0>> = <a01.Subset object at 0x7f1ce96f33d0>.sub_sets
E        +      where <a01.Subset object at 0x7f1ce96f33d0> = Subset()

test_students.py:21: AssertionError
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7f1ce96b8450>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7f1ce96b8450>> = <a01.Sum object at 0x7f1ce96b8450>.twoSum
E        +      where <a01.Sum object at 0x7f1ce96b8450> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f1ce96a42d0>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7f1ce96a42d0>> = <a01.SumEqualsZero object at 0x7f1ce96a42d0>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7f1ce96a42d0> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f1ce96f3910>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7f1ce96f3910>> = <a01.RomanToInt object at 0x7f1ce96f3910>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7f1ce96f3910> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f1ce96b8b90>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7f1ce96b8b90>> = <a01.BankAccount object at 0x7f1ce96b8b90>.deposit
E        +      where <a01.BankAccount object at 0x7f1ce96b8b90> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f1ce969a910>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7f1ce969a910>> = <a01.BankAccount object at 0x7f1ce969a910>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f1ce96a4bd0>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7f1ce96a4bd0>> = <a01.MinimumBalanceAccount object at 0x7f1ce96a4bd0>.withdraw

test_students.py:50: AssertionError
========================================================= 7 failed, 3 passed in 0.07s ==========================================================
============================================================= test session starts ==============================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/ClassesObjects
collected 10 items

test_students.py ....FFFFFF                                                                                                              [100%]

=================================================================== FAILURES ===================================================================
____________________________________________________ test_eval5[test_input10-50-expected0] _____________________________________________________

test_input1 = (10, 20, 30, 40, 50, 60, ...), test_input2 = 50, expected = [(1, 2), (0, 3)]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [((10,20,30,40,50,60,70),50,[(1, 2), (0, 3)])])
    def test_eval5(test_input1, test_input2, expected):
>       assert Sum().twoSum(test_input1, test_input2) == expected
E       assert None == [(1, 2), (0, 3)]
E        +  where None = <bound method Sum.twoSum of <a01.Sum object at 0x7feb36fda250>>((10, 20, 30, 40, 50, 60, ...), 50)
E        +    where <bound method Sum.twoSum of <a01.Sum object at 0x7feb36fda250>> = <a01.Sum object at 0x7feb36fda250>.twoSum
E        +      where <a01.Sum object at 0x7feb36fda250> = Sum()

test_students.py:25: AssertionError
______________________________________________________ test_eval6[test_input0-expected0] _______________________________________________________

test_input = [-25, -10, -7, -3, 2, 4, ...], expected = [[-10, 2, 8], [-7, -3, 10]]

    @pytest.mark.parametrize("test_input, expected", [([-25, -10, -7, -3, 2, 4, 8, 10],[[-10, 2, 8], [-7, -3, 10]])])
    def test_eval6(test_input, expected):
>       assert SumEqualsZero().threeSum(test_input) == expected
E       assert None == [[-10, 2, 8], [-7, -3, 10]]
E        +  where None = <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7feb36fb1bd0>>([-25, -10, -7, -3, 2, 4, ...])
E        +    where <bound method SumEqualsZero.threeSum of <a01.SumEqualsZero object at 0x7feb36fb1bd0>> = <a01.SumEqualsZero object at 0x7feb36fb1bd0>.threeSum
E        +      where <a01.SumEqualsZero object at 0x7feb36fb1bd0> = SumEqualsZero()

test_students.py:29: AssertionError
_______________________________________________________________ test_eval7[V-5] ________________________________________________________________

test_input = 'V', expected = 5

    @pytest.mark.parametrize("test_input, expected", [('V',5)])
    def test_eval7(test_input, expected):
>       assert RomanToInt().roman_to_int(test_input) == expected
E       AssertionError: assert None == 5
E        +  where None = <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7feb36fdaed0>>('V')
E        +    where <bound method RomanToInt.roman_to_int of <a01.RomanToInt object at 0x7feb36fdaed0>> = <a01.RomanToInt object at 0x7feb36fdaed0>.roman_to_int
E        +      where <a01.RomanToInt object at 0x7feb36fdaed0> = RomanToInt()

test_students.py:33: AssertionError
_____________________________________________________________ test_eval8[500-500] ______________________________________________________________

test_input = 500, expected = 500

    @pytest.mark.parametrize("test_input, expected", [(500,500)])
    def test_eval8(test_input, expected):
>       assert BankAccount().deposit(test_input) == expected
E       assert None == 500
E        +  where None = <bound method BankAccount.deposit of <a01.BankAccount object at 0x7feb36f9c150>>(500)
E        +    where <bound method BankAccount.deposit of <a01.BankAccount object at 0x7feb36f9c150>> = <a01.BankAccount object at 0x7feb36f9c150>.deposit
E        +      where <a01.BankAccount object at 0x7feb36f9c150> = BankAccount()

test_students.py:37: AssertionError
_____________________________________________________________ test_eval9[500-5000] _____________________________________________________________

test_input = 500, expected = 5000

    @pytest.mark.parametrize("test_input, expected", [(500,5000)])
    def test_eval9(test_input, expected):
        b = BankAccount()
        b.deposit(5500)
>       assert b.withdraw(test_input) == expected
E       assert None == 5000
E        +  where None = <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7feb36fb1250>>(500)
E        +    where <bound method BankAccount.withdraw of <a01.BankAccount object at 0x7feb36fb1250>> = <a01.BankAccount object at 0x7feb36fb1250>.withdraw

test_students.py:43: AssertionError
_________________________________________ test_eval10[6000-Sorry, minimum balance must be maintained.] _________________________________________

test_input = 6000, expected = 'Sorry, minimum balance must be maintained.'

    @pytest.mark.parametrize("test_input, expected",
    [(6000, 'Sorry, minimum balance must be maintained.')])
    def test_eval10(test_input, expected):
        m = MinimumBalanceAccount()
        m.deposit(10000)
>       assert m.withdraw(test_input) == expected
E       AssertionError: assert None == 'Sorry, minimum balance must be maintained.'
E        +  where None = <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7feb36f947d0>>(6000)
E        +    where <bound method MinimumBalanceAccount.withdraw of <a01.MinimumBalanceAccount object at 0x7feb36f947d0>> = <a01.MinimumBalanceAccount object at 0x7feb36f947d0>.withdraw

test_students.py:50: AssertionError
========================================================= 6 failed, 4 passed in 0.10s ==========================================================
