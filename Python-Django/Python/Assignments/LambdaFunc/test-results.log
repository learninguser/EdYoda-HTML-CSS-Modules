================================================================ test session starts =================================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/LambdaFunc
collected 0 items / 1 error

======================================================================= ERRORS =======================================================================
_________________________________________________________ ERROR collecting test_students.py __________________________________________________________
ImportError while importing test module '/home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/LambdaFunc/test_students.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
test_students.py:1: in <module>
    from ipynb.fs.full.assignment import *
E   ModuleNotFoundError: No module named 'ipynb'
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
================================================================== 1 error in 0.17s ==================================================================
================================================================ test session starts =================================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/LambdaFunc
collected 10 items

test_students.py .FFFFFFFFF                                                                                                                    [100%]

====================================================================== FAILURES ======================================================================
________________________________ test_eval2[test_input0-Even Numbers: [2, 4, 6, 8, 10], Odd Numbers: [1, 3, 5, 7, 9]] ________________________________

test_input = [1, 2, 3, 4, 5, 6, ...], expected = 'Even Numbers: [2, 4, 6, 8, 10], Odd Numbers: [1, 3, 5, 7, 9]'

    @pytest.mark.parametrize("test_input, expected", [([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],'Even Numbers: [2, 4, 6, 8, 10], Odd Numbers: [1, 3, 5, 7, 9]')])
    def test_eval2(test_input, expected):
>       assert question_second_solution(test_input) == expected
E       AssertionError: assert None == 'Even Numbers: [2, 4, 6, 8, 10], Odd Numbers: [1, 3, 5, 7, 9]'
E        +  where None = question_second_solution([1, 2, 3, 4, 5, 6, ...])

test_students.py:10: AssertionError
__________________________________________________ test_eval3[test_input10-test_input20-expected0] ___________________________________________________

test_input1 = [1, 2, 3, 5, 7, 8, ...], test_input2 = [1, 2, 4, 8, 9], expected = [1, 2, 8, 9]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9],[1, 2, 8, 9])])
    def test_eval3(test_input1, test_input2, expected):
>       assert question_third_solution(test_input1, test_input2) == expected
E       assert None == [1, 2, 8, 9]
E        +  where None = question_third_solution([1, 2, 3, 5, 7, 8, ...], [1, 2, 4, 8, 9])

test_students.py:14: AssertionError
_________________________________________________________ test_eval4[test_input0-expected0] __________________________________________________________

test_input = [1, 2, 3, 5, 7, 8, ...], expected = (5, 3)

    @pytest.mark.parametrize("test_input, expected", [([1, 2, 3, 5, 7, 8, 9, 10],(5,3))])
    def test_eval4(test_input, expected):
>       assert question_fourth_solution(test_input) == expected
E       assert None == (5, 3)
E        +  where None = question_fourth_solution([1, 2, 3, 5, 7, 8, ...])

test_students.py:18: AssertionError
_________________________________________________________ test_eval5[test_input0-expected0] __________________________________________________________

test_input = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', ...], expected = ['Monday', 'Friday', 'Sunday']

    @pytest.mark.parametrize("test_input, expected", [(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],['Monday', 'Friday', 'Sunday'])])
    def test_eval5(test_input, expected):
>       assert question_fifth_solution(test_input) == expected
E       AssertionError: assert None == ['Monday', 'Friday', 'Sunday']
E        +  where None = question_fifth_solution(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', ...])

test_students.py:22: AssertionError
__________________________________________________ test_eval6[test_input10-test_input20-expected0] ___________________________________________________

test_input1 = [1, 2, 3], test_input2 = [2, 3, 4], expected = [3, 5, 7]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [([1,2,3],[2,3,4],[3,5,7])])
    def test_eval6(test_input1, test_input2, expected):
>       assert question_sixth_solution(test_input1, test_input2,) == expected
E       assert None == [3, 5, 7]
E        +  where None = question_sixth_solution([1, 2, 3], [2, 3, 4])

test_students.py:26: AssertionError
________________________________________________________ test_eval7[test_input0-Garry, Harry] ________________________________________________________

test_input = [('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)], expected = 'Garry, Harry'

    @pytest.mark.parametrize("test_input, expected", [([('Harry', 8.0),('Garry',8.0),('Steve',9.5),('Daniel', 7.0)],'Garry, Harry')])
    def test_eval7(test_input, expected):
>       assert question_seventh_solution(test_input) == expected
E       AssertionError: assert None == 'Garry, Harry'
E        +  where None = question_seventh_solution([('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)])

test_students.py:30: AssertionError
_________________________________________________________ test_eval8[test_input0-expected0] __________________________________________________________

test_input = ['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'], expected = ['php', 'aaa']

    @pytest.mark.parametrize("test_input, expected", [(["php", "w3r", "Python", "abcd", "Java", "aaa"],['php', 'aaa'])])
    def test_eval8(test_input, expected):
>       assert question_eighth_solution(test_input) == expected
E       AssertionError: assert None == ['php', 'aaa']
E        +  where None = question_eighth_solution(['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'])

test_students.py:34: AssertionError
______________________________________________________ test_eval9[test_input10-abcd-expected0] _______________________________________________________

test_input1 = ['bcda', 'abce', 'cbda', 'cbea', 'adcb'], test_input2 = 'abcd', expected = ['bcda', 'cbda', 'adcb']

    @pytest.mark.parametrize("test_input1, test_input2, expected", [(["bcda", "abce", "cbda", "cbea", "adcb"],'abcd',['bcda', 'cbda', 'adcb'])])
    def test_eval9(test_input1, test_input2, expected):
>       assert question_ninth_solution(test_input1, test_input2) == expected
E       AssertionError: assert None == ['bcda', 'cbda', 'adcb']
E        +  where None = question_ninth_solution(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')

test_students.py:38: AssertionError
_________________________________________________________ test_eval10[test_input0-expected0] _________________________________________________________

test_input = [19, 65, 57, 39, 152, 639, ...], expected = [19, 65, 57, 39, 152, 190]

    @pytest.mark.parametrize("test_input, expected", [([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],[19, 65, 57, 39, 152, 190])])
    def test_eval10(test_input, expected):
>       assert question_tenth_solution(test_input) == expected
E       assert None == [19, 65, 57, 39, 152, 190]
E        +  where None = question_tenth_solution([19, 65, 57, 39, 152, 639, ...])

test_students.py:42: AssertionError
============================================================ 9 failed, 1 passed in 0.34s =============================================================
=================================================== test session starts ===================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/LambdaFunc
collected 10 items

test_students.py ...FFFFFFF                                                                                         [100%]

======================================================== FAILURES =========================================================
____________________________________________ test_eval4[test_input0-expected0] ____________________________________________

test_input = [1, 2, 3, 5, 7, 8, ...], expected = (5, 3)

    @pytest.mark.parametrize("test_input, expected", [([1, 2, 3, 5, 7, 8, 9, 10],(5,3))])
    def test_eval4(test_input, expected):
>       assert question_fourth_solution(test_input) == expected
E       assert None == (5, 3)
E        +  where None = question_fourth_solution([1, 2, 3, 5, 7, 8, ...])

test_students.py:18: AssertionError
____________________________________________ test_eval5[test_input0-expected0] ____________________________________________

test_input = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', ...]
expected = ['Monday', 'Friday', 'Sunday']

    @pytest.mark.parametrize("test_input, expected", [(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],['Monday', 'Friday', 'Sunday'])])
    def test_eval5(test_input, expected):
>       assert question_fifth_solution(test_input) == expected
E       AssertionError: assert None == ['Monday', 'Friday', 'Sunday']
E        +  where None = question_fifth_solution(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', ...])

test_students.py:22: AssertionError
_____________________________________ test_eval6[test_input10-test_input20-expected0] _____________________________________

test_input1 = [1, 2, 3], test_input2 = [2, 3, 4], expected = [3, 5, 7]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [([1,2,3],[2,3,4],[3,5,7])])
    def test_eval6(test_input1, test_input2, expected):
>       assert question_sixth_solution(test_input1, test_input2,) == expected
E       assert None == [3, 5, 7]
E        +  where None = question_sixth_solution([1, 2, 3], [2, 3, 4])

test_students.py:26: AssertionError
__________________________________________ test_eval7[test_input0-Garry, Harry] ___________________________________________

test_input = [('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)], expected = 'Garry, Harry'

    @pytest.mark.parametrize("test_input, expected", [([('Harry', 8.0),('Garry',8.0),('Steve',9.5),('Daniel', 7.0)],'Garry, Harry')])
    def test_eval7(test_input, expected):
>       assert question_seventh_solution(test_input) == expected
E       AssertionError: assert None == 'Garry, Harry'
E        +  where None = question_seventh_solution([('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)])

test_students.py:30: AssertionError
____________________________________________ test_eval8[test_input0-expected0] ____________________________________________

test_input = ['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'], expected = ['php', 'aaa']

    @pytest.mark.parametrize("test_input, expected", [(["php", "w3r", "Python", "abcd", "Java", "aaa"],['php', 'aaa'])])
    def test_eval8(test_input, expected):
>       assert question_eighth_solution(test_input) == expected
E       AssertionError: assert None == ['php', 'aaa']
E        +  where None = question_eighth_solution(['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'])

test_students.py:34: AssertionError
_________________________________________ test_eval9[test_input10-abcd-expected0] _________________________________________

test_input1 = ['bcda', 'abce', 'cbda', 'cbea', 'adcb'], test_input2 = 'abcd', expected = ['bcda', 'cbda', 'adcb']

    @pytest.mark.parametrize("test_input1, test_input2, expected", [(["bcda", "abce", "cbda", "cbea", "adcb"],'abcd',['bcda', 'cbda', 'adcb'])])
    def test_eval9(test_input1, test_input2, expected):
>       assert question_ninth_solution(test_input1, test_input2) == expected
E       AssertionError: assert None == ['bcda', 'cbda', 'adcb']
E        +  where None = question_ninth_solution(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')

test_students.py:38: AssertionError
___________________________________________ test_eval10[test_input0-expected0] ____________________________________________

test_input = [19, 65, 57, 39, 152, 639, ...], expected = [19, 65, 57, 39, 152, 190]

    @pytest.mark.parametrize("test_input, expected", [([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],[19, 65, 57, 39, 152, 190])])
    def test_eval10(test_input, expected):
>       assert question_tenth_solution(test_input) == expected
E       assert None == [19, 65, 57, 39, 152, 190]
E        +  where None = question_tenth_solution([19, 65, 57, 39, 152, 639, ...])

test_students.py:42: AssertionError
=============================================== 7 failed, 3 passed in 0.39s ===============================================
=================================================== test session starts ===================================================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/LambdaFunc
collected 10 items

test_students.py ....FFFFFF                                                                                         [100%]

======================================================== FAILURES =========================================================
____________________________________________ test_eval5[test_input0-expected0] ____________________________________________

test_input = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', ...]
expected = ['Monday', 'Friday', 'Sunday']

    @pytest.mark.parametrize("test_input, expected", [(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],['Monday', 'Friday', 'Sunday'])])
    def test_eval5(test_input, expected):
>       assert question_fifth_solution(test_input) == expected
E       AssertionError: assert None == ['Monday', 'Friday', 'Sunday']
E        +  where None = question_fifth_solution(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', ...])

test_students.py:22: AssertionError
_____________________________________ test_eval6[test_input10-test_input20-expected0] _____________________________________

test_input1 = [1, 2, 3], test_input2 = [2, 3, 4], expected = [3, 5, 7]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [([1,2,3],[2,3,4],[3,5,7])])
    def test_eval6(test_input1, test_input2, expected):
>       assert question_sixth_solution(test_input1, test_input2,) == expected
E       assert None == [3, 5, 7]
E        +  where None = question_sixth_solution([1, 2, 3], [2, 3, 4])

test_students.py:26: AssertionError
__________________________________________ test_eval7[test_input0-Garry, Harry] ___________________________________________

test_input = [('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)], expected = 'Garry, Harry'

    @pytest.mark.parametrize("test_input, expected", [([('Harry', 8.0),('Garry',8.0),('Steve',9.5),('Daniel', 7.0)],'Garry, Harry')])
    def test_eval7(test_input, expected):
>       assert question_seventh_solution(test_input) == expected
E       AssertionError: assert None == 'Garry, Harry'
E        +  where None = question_seventh_solution([('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)])

test_students.py:30: AssertionError
____________________________________________ test_eval8[test_input0-expected0] ____________________________________________

test_input = ['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'], expected = ['php', 'aaa']

    @pytest.mark.parametrize("test_input, expected", [(["php", "w3r", "Python", "abcd", "Java", "aaa"],['php', 'aaa'])])
    def test_eval8(test_input, expected):
>       assert question_eighth_solution(test_input) == expected
E       AssertionError: assert None == ['php', 'aaa']
E        +  where None = question_eighth_solution(['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'])

test_students.py:34: AssertionError
_________________________________________ test_eval9[test_input10-abcd-expected0] _________________________________________

test_input1 = ['bcda', 'abce', 'cbda', 'cbea', 'adcb'], test_input2 = 'abcd', expected = ['bcda', 'cbda', 'adcb']

    @pytest.mark.parametrize("test_input1, test_input2, expected", [(["bcda", "abce", "cbda", "cbea", "adcb"],'abcd',['bcda', 'cbda', 'adcb'])])
    def test_eval9(test_input1, test_input2, expected):
>       assert question_ninth_solution(test_input1, test_input2) == expected
E       AssertionError: assert None == ['bcda', 'cbda', 'adcb']
E        +  where None = question_ninth_solution(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')

test_students.py:38: AssertionError
___________________________________________ test_eval10[test_input0-expected0] ____________________________________________

test_input = [19, 65, 57, 39, 152, 639, ...], expected = [19, 65, 57, 39, 152, 190]

    @pytest.mark.parametrize("test_input, expected", [([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],[19, 65, 57, 39, 152, 190])])
    def test_eval10(test_input, expected):
>       assert question_tenth_solution(test_input) == expected
E       assert None == [19, 65, 57, 39, 152, 190]
E        +  where None = question_tenth_solution([19, 65, 57, 39, 152, 639, ...])

test_students.py:42: AssertionError
=============================================== 6 failed, 4 passed in 0.30s ===============================================
======================== test session starts =========================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/LambdaFunc
collected 10 items

test_students.py .....FFFFF                                    [100%]

============================== FAILURES ==============================
__________ test_eval6[test_input10-test_input20-expected0] ___________

test_input1 = [1, 2, 3], test_input2 = [2, 3, 4], expected = [3, 5, 7]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [([1,2,3],[2,3,4],[3,5,7])])
    def test_eval6(test_input1, test_input2, expected):
>       assert question_sixth_solution(test_input1, test_input2,) == expected
E       assert None == [3, 5, 7]
E        +  where None = question_sixth_solution([1, 2, 3], [2, 3, 4])

test_students.py:26: AssertionError
________________ test_eval7[test_input0-Garry, Harry] ________________

test_input = [('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)]
expected = 'Garry, Harry'

    @pytest.mark.parametrize("test_input, expected", [([('Harry', 8.0),('Garry',8.0),('Steve',9.5),('Daniel', 7.0)],'Garry, Harry')])
    def test_eval7(test_input, expected):
>       assert question_seventh_solution(test_input) == expected
E       AssertionError: assert None == 'Garry, Harry'
E        +  where None = question_seventh_solution([('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)])

test_students.py:30: AssertionError
_________________ test_eval8[test_input0-expected0] __________________

test_input = ['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa']
expected = ['php', 'aaa']

    @pytest.mark.parametrize("test_input, expected", [(["php", "w3r", "Python", "abcd", "Java", "aaa"],['php', 'aaa'])])
    def test_eval8(test_input, expected):
>       assert question_eighth_solution(test_input) == expected
E       AssertionError: assert None == ['php', 'aaa']
E        +  where None = question_eighth_solution(['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'])

test_students.py:34: AssertionError
______________ test_eval9[test_input10-abcd-expected0] _______________

test_input1 = ['bcda', 'abce', 'cbda', 'cbea', 'adcb']
test_input2 = 'abcd', expected = ['bcda', 'cbda', 'adcb']

    @pytest.mark.parametrize("test_input1, test_input2, expected", [(["bcda", "abce", "cbda", "cbea", "adcb"],'abcd',['bcda', 'cbda', 'adcb'])])
    def test_eval9(test_input1, test_input2, expected):
>       assert question_ninth_solution(test_input1, test_input2) == expected
E       AssertionError: assert None == ['bcda', 'cbda', 'adcb']
E        +  where None = question_ninth_solution(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')

test_students.py:38: AssertionError
_________________ test_eval10[test_input0-expected0] _________________

test_input = [19, 65, 57, 39, 152, 639, ...]
expected = [19, 65, 57, 39, 152, 190]

    @pytest.mark.parametrize("test_input, expected", [([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],[19, 65, 57, 39, 152, 190])])
    def test_eval10(test_input, expected):
>       assert question_tenth_solution(test_input) == expected
E       assert None == [19, 65, 57, 39, 152, 190]
E        +  where None = question_tenth_solution([19, 65, 57, 39, 152, 639, ...])

test_students.py:42: AssertionError
==================== 5 failed, 5 passed in 0.30s =====================
======================== test session starts =========================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/LambdaFunc
collected 10 items

test_students.py .....FFFFF                                    [100%]

============================== FAILURES ==============================
__________ test_eval6[test_input10-test_input20-expected0] ___________

test_input1 = [1, 2, 3], test_input2 = [2, 3, 4], expected = [3, 5, 7]

    @pytest.mark.parametrize("test_input1, test_input2, expected", [([1,2,3],[2,3,4],[3,5,7])])
    def test_eval6(test_input1, test_input2, expected):
>       assert question_sixth_solution(test_input1, test_input2,) == expected
E       assert None == [3, 5, 7]
E        +  where None = question_sixth_solution([1, 2, 3], [2, 3, 4])

test_students.py:26: AssertionError
________________ test_eval7[test_input0-Garry, Harry] ________________

test_input = [('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)]
expected = 'Garry, Harry'

    @pytest.mark.parametrize("test_input, expected", [([('Harry', 8.0),('Garry',8.0),('Steve',9.5),('Daniel', 7.0)],'Garry, Harry')])
    def test_eval7(test_input, expected):
>       assert question_seventh_solution(test_input) == expected
E       AssertionError: assert None == 'Garry, Harry'
E        +  where None = question_seventh_solution([('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)])

test_students.py:30: AssertionError
_________________ test_eval8[test_input0-expected0] __________________

test_input = ['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa']
expected = ['php', 'aaa']

    @pytest.mark.parametrize("test_input, expected", [(["php", "w3r", "Python", "abcd", "Java", "aaa"],['php', 'aaa'])])
    def test_eval8(test_input, expected):
>       assert question_eighth_solution(test_input) == expected
E       AssertionError: assert None == ['php', 'aaa']
E        +  where None = question_eighth_solution(['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'])

test_students.py:34: AssertionError
______________ test_eval9[test_input10-abcd-expected0] _______________

test_input1 = ['bcda', 'abce', 'cbda', 'cbea', 'adcb']
test_input2 = 'abcd', expected = ['bcda', 'cbda', 'adcb']

    @pytest.mark.parametrize("test_input1, test_input2, expected", [(["bcda", "abce", "cbda", "cbea", "adcb"],'abcd',['bcda', 'cbda', 'adcb'])])
    def test_eval9(test_input1, test_input2, expected):
>       assert question_ninth_solution(test_input1, test_input2) == expected
E       AssertionError: assert None == ['bcda', 'cbda', 'adcb']
E        +  where None = question_ninth_solution(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')

test_students.py:38: AssertionError
_________________ test_eval10[test_input0-expected0] _________________

test_input = [19, 65, 57, 39, 152, 639, ...]
expected = [19, 65, 57, 39, 152, 190]

    @pytest.mark.parametrize("test_input, expected", [([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],[19, 65, 57, 39, 152, 190])])
    def test_eval10(test_input, expected):
>       assert question_tenth_solution(test_input) == expected
E       assert None == [19, 65, 57, 39, 152, 190]
E        +  where None = question_tenth_solution([19, 65, 57, 39, 152, 639, ...])

test_students.py:42: AssertionError
==================== 5 failed, 5 passed in 0.29s =====================
======================== test session starts =========================
platform linux -- Python 3.7.6, pytest-5.3.5, py-1.8.1, pluggy-0.13.1
rootdir: /home/pavan/Documents/EdYoda/EdYoda-Learning/Python-Django/Python/Assignments/LambdaFunc
collected 10 items

test_students.py ......FFFF                                    [100%]

============================== FAILURES ==============================
________________ test_eval7[test_input0-Garry, Harry] ________________

test_input = [('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)]
expected = 'Garry, Harry'

    @pytest.mark.parametrize("test_input, expected", [([('Harry', 8.0),('Garry',8.0),('Steve',9.5),('Daniel', 7.0)],'Garry, Harry')])
    def test_eval7(test_input, expected):
>       assert question_seventh_solution(test_input) == expected
E       AssertionError: assert None == 'Garry, Harry'
E        +  where None = question_seventh_solution([('Harry', 8.0), ('Garry', 8.0), ('Steve', 9.5), ('Daniel', 7.0)])

test_students.py:30: AssertionError
_________________ test_eval8[test_input0-expected0] __________________

test_input = ['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa']
expected = ['php', 'aaa']

    @pytest.mark.parametrize("test_input, expected", [(["php", "w3r", "Python", "abcd", "Java", "aaa"],['php', 'aaa'])])
    def test_eval8(test_input, expected):
>       assert question_eighth_solution(test_input) == expected
E       AssertionError: assert None == ['php', 'aaa']
E        +  where None = question_eighth_solution(['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa'])

test_students.py:34: AssertionError
______________ test_eval9[test_input10-abcd-expected0] _______________

test_input1 = ['bcda', 'abce', 'cbda', 'cbea', 'adcb']
test_input2 = 'abcd', expected = ['bcda', 'cbda', 'adcb']

    @pytest.mark.parametrize("test_input1, test_input2, expected", [(["bcda", "abce", "cbda", "cbea", "adcb"],'abcd',['bcda', 'cbda', 'adcb'])])
    def test_eval9(test_input1, test_input2, expected):
>       assert question_ninth_solution(test_input1, test_input2) == expected
E       AssertionError: assert None == ['bcda', 'cbda', 'adcb']
E        +  where None = question_ninth_solution(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')

test_students.py:38: AssertionError
_________________ test_eval10[test_input0-expected0] _________________

test_input = [19, 65, 57, 39, 152, 639, ...]
expected = [19, 65, 57, 39, 152, 190]

    @pytest.mark.parametrize("test_input, expected", [([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],[19, 65, 57, 39, 152, 190])])
    def test_eval10(test_input, expected):
>       assert question_tenth_solution(test_input) == expected
E       assert None == [19, 65, 57, 39, 152, 190]
E        +  where None = question_tenth_solution([19, 65, 57, 39, 152, 639, ...])

test_students.py:42: AssertionError
==================== 4 failed, 6 passed in 0.30s =====================
